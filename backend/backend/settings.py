"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-g*au495-$&vra*mex$k&8z9*)s0ip-6j6%38bul4n48vw)1wu2"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # Installed 3rd party apps by Edmon
    # Make sure to add these required apps
    'django.contrib.sites',  # This is need for allauth
    # Django-allauth apps
    'allauth',  # This is need for allauth
    'allauth.account',  # This is need for allauth

    # This line adds django restframework in our project
    'rest_framework',

    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",  # This is need for allauth
    "django.contrib.staticfiles",

    "portal",

]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    # Add the account middleware: by Edmon
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


AUTHENTICATION_BACKENDS = [

    # Log using the built-in Django
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # Login Using Things like Email address, Gmail Account, Facebook Account, Github Account, and Others
    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',

]

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# You can set the login method (ACCOUNT_AUTHENTICATION_METHOD) by "username"
# or "email address" for the user. This project will set "ACCOUNT_AUTHENTICATION_METHOD"
# for extra security measures and to authenticate users better.
# ACCOUNT_AUTHENTICATION_METHOD = "email"

# Email required for activation: This option allows you to set whether the email
# address should be verified to register. Set False to disable email requirement.
ACCOUNT_EMAIL_REQUIRED = False

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'documents_managment_project_db_final5',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# Note 1: "static" in Django refers to static files of our application like "CSS", "JavaScript" and "Images"
STATIC_URL = "static/"

# Note 2: "Media" refers to "files uploaded by the users"
# "MEDIA_URL" refers to the link or URL where we can find the users uploaded files
MEDIA_URL = "/media/"

# Note 3: "" This is telling Django where these media files are stored in the file system
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# This line is added by Edmon to configure Static files for Boostrap CSS library
# STATICFILES_DIRS = [
#     BASE_DIR / "static",
# ]
# STATIC_ROOT = os.path.join(BASE_DIR, "static")


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Additional Basic Allauth Configurations:

# "ACCOUNT_AUTHENTICATION_METHOD" (="username" | "email" | "username_email")
# Specifices the login method to use - whether the user logs in by entering their username, e-mail address,
# or either one of both. Setting this to "email" requires ACCOUNT_EMAIL_REQUIRED=True
ACCOUNT_AUTHENTICATION_METHOD = "username_email"

# This setting confirms the User's email account as soon as the user clicks the link on the email address
# thier acccount is confirmed.
ACCOUNT_CONFIRM_EMAIL_ON_GET = True

# This allows users to sign up using their email account
ACCOUNT_EMAIL_REQUIRED = True

# Account email verification: This option can be used to set whether an email verification
# is necessary for a user to log in after he registers an account. You can use ‘mandatory’
# to block a user from logging in until the email gets verified. You can set options
# for sending the email but allowing the user to log in without an email.
# You can also set none to send no verification email. (Not Recommended)
# Determines the e-mail verificaiton method during signup - choose one of
# "mandatory", "optional" or "none"
ACCOUNT_EMAIL_VERIFICATION = "mandatory"

# Email confirmation expiry: Sets the number of days within which an account should be activated.
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7

# Login Attempt Limit: This is an important feature which can be used to prevent
# brute force attacks on the user login page on your website.
# The maximum number of login attempts can be set,
# and the user gets blocked from logging back in until a timeout.
# This feature makes use of ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT setting.
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5

# The default behavior is not log users in and to redirect them to
# "ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL".
# By changing this setting to "True", users will automatically be logged in once they
# confirm their email address. Note however that this only works when confirming the email
# address "immediately after signing up", assuming users didn't close their browser or used some sort of
# private browsing mode.
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True

# ACCOUNTLOGOUT_ON_GET ; determines whether or not the user is automatically logged out by a GET request
# GET is not designed to modify the server state, and in this case it can be dangerous.
ACCOUNT_LOGOUT_ON_GET = True


# ACCOUNT_LOGIN_ON_PASSWORD_RESET (False)
# By changing this setting to "True", users will automatically be logged in once they have reset their
# password. By default their are redirected to the password reset done page.
# Note 3: It is better to leave this setting to "False" or on default setting because we want
# to check and make sure the user's new password workds and they can access the website once they change
# to new password or once they reset their password.
ACCOUNT_LOGIN_ON_PASSWORD_RESET = False


# Login and Logout URL redirection: When user logs in or logs out,
# you might want to redirect the user to a particular URL or page and
# the below settings can be used to set that URL.
# By default, allauth redirects login to /accounts/profile/ URL
# and logout to the localhost:8000 or any localhost homepage.

# These are the default login and logout redirects for allauths.
# ACCOUNT_LOGOUT_REDIRECT_URL = '/accounts/login/'
# LOGIN_REDIRECT_URL = '/accounts/email/'

# These are the custom login and logout redirects for allauths for
# managming users accounts.
LOGIN_REDIRECT_URL = "home"
ACCOUNT_LOGOUT_REDIRECT_URL = "home"

# ACCOUNT_PRESERVE_USERNAME_CASING = False
# This setting determines whether the username is stored in lowercase (False) or whether it its casing
# to be preserved (True).
# Note 1: Setting this to "False" allows us to have Users' username in all lowercase letters.
ACCOUNT_PRESERVE_USERNAME_CASING = False

# ACCOUNT_SESSION_REMEMBER = False
# Controls the life time of the session. Set to "None" to ask the user ("Remember me?"),
# "False" to not remember, and "True" to always remember
ACCOUNT_SESSION_REMEMBER = False

# ACCOUNT_USERNAME_BLACKLIST (=[])
# "ACCOUNT_USERNAME_BLACKLIST" is a list of usernames that can't be used by users on the website
# or portal web app
ACCOUNT_USERNAME_BLACKLIST = [
    "edmon",
    "edmontheprogrammer",
    "god",
    "admin",
    "administrator",
    "superuser",
    "createsuperuser"]


# ACCOUNT_USERNAME_MIN_LENGTH (=1)
# An integer specifying the minimum allowed length of a username
ACCOUNT_USERNAME_MIN_LENGTH = 3


# Login Attempt Limit timeout: This setting should be used with
# setting ACCOUNT_LOGIN_ATTEMPTS_LIMIT . The value set is in seconds from the last
# unsuccessful login attempt. Please note that this does not protect admin login.

# ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 86400 # 1 day in seconds

# Sets the ID of your site's URL.
# The Django Project or Django Framework can have multiple websites.
# "SITE_ID" is the unique identifier for each web app or each website that you create.
# "SITE_ID" is the the primary key for each Django web app you create.
# This line identifies the "portal" web app with a site id of 1 "SITE_ID = 1"
SITE_ID = 1


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field


# List of Django Projects Requriments
# django
# devtool
# psycopg2
